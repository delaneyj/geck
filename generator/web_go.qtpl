package generator

{%- func webTemplate(data *ecsTmplData) -%}
package {%s data.PackageName %}

import (
    "context"
    "github.com/go-chi/chi/v5"
)

func SetupRoutes(setupCtx context.Context, world *World, baseRouter chi.Router) error {
    baseRouter.Get("/", func(w http.ResponseWriter, r *http.Request) {
        w.Write([]byte("Hello, Geck!"))
    })

    baseRouter.Route("/sparsesets", func(sparseSetsRouter chi.Router) {
        sparseSetsRouter.Get("/", func(w http.ResponseWriter, r *http.Request) {
            w.Write([]byte("Hello, SparseSets!"))
        })

        {% for _, c := range data.Components[0:1] %}
        {% if !c.IsTag && !c.IsRelationship %}
        sparseSetsRouter.Route("/{%s c.Name.Singular.Camel %}", func(ssRouter chi.Router) {
            ssRouter.Get("/", func(w http.ResponseWriter, r *http.Request) {
                ss := world.{%s c.Name.Singular.Camel %}Components
                SparseSetView(ss).Render(r.Context(),w)
            })
        })
        {% endif %}
        {% endfor %}
    })

    return nil
}

{%- endfunc -%}
