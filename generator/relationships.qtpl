package generator

{% func relationshipTemplate(data *componentTmplData) %}
package {%s data.PackageName -%}

import (
    "github.com/tidwall/btree"
{% if data.HasAnyEvents %}
    import "github.com/btvoidx/mint"
{% endif %}
)

{%- code
nsp := data.Name.Singular.Pascal
nsc := data.Name.Singular.Camel
pairName := data.Name.Singular.Pascal + "RelationshipPair"
-%}

type {%s pairName %} struct {
    From Entity
    To Entity
    {%- for _, f := range data.Fields -%}
    {%s f.Name.Singular.Pascal %} {%s f.Type.Singular.Original %}
    {%- endfor -%}
}

type {%s nsp %}Relationship struct {
    btree *btree.BTreeG[{%s pairName %}]
}

func New{%s nsp %}Relationship() *{%s nsp %}Relationship {
    return &{%s nsp %}Relationship{
        btree: btree.NewBTreeG[{%s pairName %}](func(a, b {%s pairName %}) bool {
            ati, bti := a.To.Index(), b.To.Index()
            if ati == bti {
                return a.From.Index() < b.From.Index()
            }
            return ati < bti
        }),
    }
}

func (r *{%s nsp %}Relationship) Clear() {
    r.btree.Clear()
}

func(w *World) Link{%s nsp %}(
    to, from Entity,
    {%- for _, f := range data.Fields -%}
    {%s f.Name.Singular.Camel %}Arg {%s f.Type.Singular.Original %},
    {%- endfor -%}
) {
    pair := {%s pairName %}{
        From: from,
        To: to,
        {%- for _, f := range data.Fields -%}
        {%s f.Name.Singular.Pascal %}: {%s f.Name.Singular.Camel %}Arg,
        {%- endfor -%}
    }

    w.{%s nsc %}Relationships.btree.Set(pair)
}

func(w *World) Unlink{%s nsp %}(from, to Entity) {
    pair := {%s pairName %}{
        From: from,
        To: to,
    }
    w.{%s nsc %}Relationships.btree.Delete(pair)
}

func (w *World) {%s nsp %}IsLinked(from, to Entity) bool {
    pair := {%s pairName %}{
        From: from,
        To: to,
    }

    _, ok := w.{%s nsc %}Relationships.btree.Get(pair)
    return ok
}

func (w *World) {%s nsp %}(to Entity) func(yield func(from Entity) bool) {
    return func(yield func(from Entity) bool) {
        iter := w.{%s nsc %}Relationships.btree.Iter()
        iter.Seek({%s pairName %}{ To: to })
        end := {%s pairName %}{ To: to + 1 }

        for iter.Next() {
            item := iter.Item()
            if item.To >= end.To {
                break
            }

            if !yield(item.From) {
                break
            }
        }
    }
}

func (w *World) Remove{%s nsp %}Relationships(to Entity, froms ... Entity) {
    for _, from := range froms {
        pair := {%s pairName %}{
            To: to,
            From: from,
        }

        w.{%s nsc %}Relationships.btree.Delete(pair)
    }
}

func (w *World) RemoveAll{%s nsp %}Relationships(to Entity) {
    iter := w.{%s nsc %}Relationships.btree.Iter()
    end := {%s pairName %}{ To: to + 1 }

    for iter.Next() {
        item := iter.Item()
        if item.To >= end.To {
            break
        }

        w.{%s nsc %}Relationships.btree.Delete(item)
    }
}


{%- endfunc -%}
