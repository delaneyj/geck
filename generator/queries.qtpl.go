// Code generated by qtc from "queries.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

// package generator
//
//

//line generator/queries.qtpl:4
package generator

//line generator/queries.qtpl:4
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line generator/queries.qtpl:4
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line generator/queries.qtpl:4
func streamqueryTemplate(qw422016 *qt422016.Writer, data *queryTmplData) {
//line generator/queries.qtpl:4
	qw422016.N().S(`
package `)
//line generator/queries.qtpl:5
	qw422016.E().S(data.PackageName)
//line generator/queries.qtpl:5
	qw422016.N().S(`

import "sort"

`)
//line generator/queries.qtpl:10
	argsName := "Query" + data.Name.Plural.Pascal + "Args"
	iterName := "query" + data.Name.Plural.Pascal + "Iter"
	first := data.Entries[0]
	rest := data.Entries[1:]
	firstIterName := "All"
	if first.IsMutable {
		firstIterName += "Mutable"
	}
	firstIterName += first.Name.Plural.Pascal

	firstSparseSetName := first.Name.Plural.Camel
	if first.ComponentOrTag.IsTag {
		firstSparseSetName += "Tags"
	} else {
		firstSparseSetName += "Components"
	}

//line generator/queries.qtpl:27
	qw422016.N().S(`
type `)
//line generator/queries.qtpl:28
	qw422016.E().S(argsName)
//line generator/queries.qtpl:28
	qw422016.N().S(` struct {
    `)
//line generator/queries.qtpl:29
	for _, arg := range data.Entries {
//line generator/queries.qtpl:29
		qw422016.N().S(`    `)
//line generator/queries.qtpl:30
		if !arg.ComponentOrTag.IsTag {
//line generator/queries.qtpl:30
			qw422016.N().S(`
    `)
//line generator/queries.qtpl:31
			qw422016.E().S(arg.Name.Singular.Pascal)
//line generator/queries.qtpl:31
			qw422016.N().S(` `)
//line generator/queries.qtpl:31
			if arg.IsMutable {
//line generator/queries.qtpl:31
				qw422016.N().S(`*`)
//line generator/queries.qtpl:31
			}
//line generator/queries.qtpl:31
			qw422016.E().S(arg.Name.Singular.Pascal)
//line generator/queries.qtpl:31
			qw422016.N().S(`Component
    `)
//line generator/queries.qtpl:32
		}
//line generator/queries.qtpl:32
		qw422016.N().S(`
    `)
//line generator/queries.qtpl:33
	}
//line generator/queries.qtpl:33
	qw422016.N().S(`
}

type `)
//line generator/queries.qtpl:36
	qw422016.E().S(iterName)
//line generator/queries.qtpl:36
	qw422016.N().S(`  func(e Entity, args `)
//line generator/queries.qtpl:36
	qw422016.E().S(argsName)
//line generator/queries.qtpl:36
	qw422016.N().S(`) bool


func(w *World) Query`)
//line generator/queries.qtpl:39
	qw422016.E().S(data.Name.Singular.Pascal)
//line generator/queries.qtpl:39
	qw422016.N().S(`(yield `)
//line generator/queries.qtpl:39
	qw422016.E().S(iterName)
//line generator/queries.qtpl:39
	qw422016.N().S(`) {
    args := `)
//line generator/queries.qtpl:40
	qw422016.E().S(argsName)
//line generator/queries.qtpl:40
	qw422016.N().S(`{}

    `)
//line generator/queries.qtpl:42
	if len(rest) > 0 {
//line generator/queries.qtpl:42
		qw422016.N().S(`
    var ok bool
    `)
//line generator/queries.qtpl:44
	}
//line generator/queries.qtpl:44
	qw422016.N().S(`

`)
//line generator/queries.qtpl:46
	if first.ComponentOrTag.IsTag {
//line generator/queries.qtpl:46
		qw422016.N().S(`    for e := range w.`)
//line generator/queries.qtpl:47
		qw422016.E().S(firstIterName)
//line generator/queries.qtpl:47
		qw422016.N().S(`Entities {
`)
//line generator/queries.qtpl:48
	} else {
//line generator/queries.qtpl:48
		qw422016.N().S(`    for e, first := range w.`)
//line generator/queries.qtpl:49
		qw422016.E().S(firstIterName)
//line generator/queries.qtpl:49
		qw422016.N().S(` {
        args.`)
//line generator/queries.qtpl:50
		qw422016.E().S(first.Name.Singular.Pascal)
//line generator/queries.qtpl:50
		qw422016.N().S(` = first
`)
//line generator/queries.qtpl:51
	}
//line generator/queries.qtpl:51
	qw422016.N().S(`        ok  = true

`)
//line generator/queries.qtpl:54
	for _, e := range rest {
//line generator/queries.qtpl:54
		qw422016.N().S(`            `)
//line generator/queries.qtpl:55
		if e.ComponentOrTag.IsTag {
//line generator/queries.qtpl:55
			qw422016.N().S(`
            if !w.Has`)
//line generator/queries.qtpl:56
			qw422016.E().S(e.Name.Singular.Pascal)
//line generator/queries.qtpl:56
			qw422016.N().S(`Tag(e) {
                continue
            }
            `)
//line generator/queries.qtpl:59
		} else {
//line generator/queries.qtpl:59
			qw422016.N().S(`
                `)
//line generator/queries.qtpl:60
			if e.IsMutable {
//line generator/queries.qtpl:60
				qw422016.N().S(`
            args.`)
//line generator/queries.qtpl:61
				qw422016.E().S(e.Name.Singular.Pascal)
//line generator/queries.qtpl:61
				qw422016.N().S(`, ok = w.Mutable`)
//line generator/queries.qtpl:61
				qw422016.E().S(e.Name.Singular.Pascal)
//line generator/queries.qtpl:61
				qw422016.N().S(`(e)
                `)
//line generator/queries.qtpl:62
			} else {
//line generator/queries.qtpl:62
				qw422016.N().S(`
            args.`)
//line generator/queries.qtpl:63
				qw422016.E().S(e.Name.Singular.Pascal)
//line generator/queries.qtpl:63
				qw422016.N().S(`, ok = w.`)
//line generator/queries.qtpl:63
				qw422016.E().S(e.Name.Singular.Pascal)
//line generator/queries.qtpl:63
				qw422016.N().S(`(e)
                `)
//line generator/queries.qtpl:64
			}
//line generator/queries.qtpl:64
			qw422016.N().S(`
            `)
//line generator/queries.qtpl:65
		}
//line generator/queries.qtpl:65
		qw422016.N().S(`
            if !ok {
                continue
            }
`)
//line generator/queries.qtpl:69
	}
//line generator/queries.qtpl:69
	qw422016.N().S(`

        if !yield(e, args) {
            break
        }
    }
}

func(w *World) Query`)
//line generator/queries.qtpl:78
	qw422016.E().S(data.Name.Singular.Pascal)
//line generator/queries.qtpl:78
	qw422016.N().S(`Entities(yield func(e Entity) bool) {
    for e := range w.`)
//line generator/queries.qtpl:79
	qw422016.E().S(firstIterName)
//line generator/queries.qtpl:79
	qw422016.N().S(`Entities {
`)
//line generator/queries.qtpl:80
	for _, e := range rest {
//line generator/queries.qtpl:81
		if e.ComponentOrTag.IsTag {
//line generator/queries.qtpl:81
			qw422016.N().S(`            if !w.Has`)
//line generator/queries.qtpl:82
			qw422016.E().S(e.Name.Singular.Pascal)
//line generator/queries.qtpl:82
			qw422016.N().S(`Tag(e) {
                continue
            }
`)
//line generator/queries.qtpl:85
		} else {
//line generator/queries.qtpl:85
			qw422016.N().S(`            if !w.Has`)
//line generator/queries.qtpl:86
			qw422016.E().S(e.Name.Singular.Pascal)
//line generator/queries.qtpl:86
			qw422016.N().S(`(e) {
                continue
            }
`)
//line generator/queries.qtpl:89
		}
//line generator/queries.qtpl:90
	}
//line generator/queries.qtpl:90
	qw422016.N().S(`
        if !yield(e) {
            break
        }
    }
}

`)
//line generator/queries.qtpl:98
}

//line generator/queries.qtpl:98
func writequeryTemplate(qq422016 qtio422016.Writer, data *queryTmplData) {
//line generator/queries.qtpl:98
	qw422016 := qt422016.AcquireWriter(qq422016)
//line generator/queries.qtpl:98
	streamqueryTemplate(qw422016, data)
//line generator/queries.qtpl:98
	qt422016.ReleaseWriter(qw422016)
//line generator/queries.qtpl:98
}

//line generator/queries.qtpl:98
func queryTemplate(data *queryTmplData) string {
//line generator/queries.qtpl:98
	qb422016 := qt422016.AcquireByteBuffer()
//line generator/queries.qtpl:98
	writequeryTemplate(qb422016, data)
//line generator/queries.qtpl:98
	qs422016 := string(qb422016.B)
//line generator/queries.qtpl:98
	qt422016.ReleaseByteBuffer(qb422016)
//line generator/queries.qtpl:98
	return qs422016
//line generator/queries.qtpl:98
}
