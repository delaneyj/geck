package generator


{%- func worldTemplate(data *ecsTmplData) -%}
package {%s data.PackageName %}

import (
    "github.com/RoaringBitmap/roaring"
    "github.com/btvoidx/mint"
    "context"
)

type empty struct{}

type World struct{
    nextEntityID int
    livingEntities,freeEntities *SparseSet[empty]
    resourceEntity Entity
    systems []SystemTicker
    eventBus *mint.Emitter

    // Tags
    {%- for _, c := range data.Components -%}
    {%- if c.IsTag -%}
    {%s c.Name.Singular.Camel %}Tags *SparseSet[empty]
    {%- endif -%}
    {%- endfor -%}

    // Components
    {%- for _, c := range data.Components -%}
    {%- if !c.IsTag && !c.IsRelationship -%}
    {%s c.Name.Singular.Camel %}Components *SparseSet[{%s c.Name.Singular.Pascal %}Component]
    {%- endif -%}
    {%- endfor -%}

    // Relationships
    {%- for _, c := range data.Components -%}
    {%- if c.IsRelationship -%}
    {%s c.Name.Singular.Camel %}Relationships *{%s c.Name.Singular.Pascal %}Relationship
    {%- endif -%}
    {%- endfor -%}
}

func NewWorld() *World{
    w := &World{
        nextEntityID: 0,
        livingEntities: NewSparseSet[empty](),
        freeEntities: NewSparseSet[empty](),
        eventBus: &mint.Emitter{},

        // Initialize tags
        {%- for _, c := range data.Components -%}
            {%- if c.IsTag -%}
                {%s c.Name.Singular.Camel %}Tags : NewSparseSet[empty](),
            {%- endif -%}
        {%- endfor -%}


        // Initialize components
        {%- for _, c := range data.Components -%}
            {%- if !c.IsTag && !c.IsRelationship -%}
                {%s c.Name.Singular.Camel %}Components: NewSparseSet[{%s c.Name.Singular.Pascal %}Component](),
            {%- endif -%}
        {%- endfor -%}

        // Initialize relationships
        {%- for _, c := range data.Components -%}
            {%- if c.IsRelationship -%}
                {%s c.Name.Singular.Camel %}Relationships: New{%s c.Name.Singular.Pascal %}Relationship(),
            {%- endif -%}
        {%- endfor -%}
    }

    w.Reset()

    return w
}

func (w *World) Reset(){
    w.nextEntityID = 0
    w.livingEntities.Clear()
    w.freeEntities.Clear()
    w.resourceEntity = w.NextEntity()

    // Reset tags
    {%- for _, c := range data.Components -%}
        {%- if c.IsTag -%}
            w.{%s c.Name.Singular.Camel %}Tags.Clear()
        {%- endif -%}
    {%- endfor -%}

    // Reset components
    {%- for _, c := range data.Components -%}
        {%- if !c.IsTag && !c.IsRelationship -%}
            w.{%s c.Name.Singular.Camel %}Components.Clear()
        {%- endif -%}
    {%- endfor -%}

    // Reset relationships
    {%- for _, c := range data.Components -%}
        {%- if c.IsRelationship -%}
            w.{%s c.Name.Singular.Camel %}Relationships.Clear()
        {%- endif -%}
    {%- endfor -%}
}

func(w *World)  AddSystems(systems ...System) error{
    for _, s := range systems{
        if err := s.Initialize(w); err != nil{
            return fmt.Errorf("failed to initialize system: %w", err)
        }

        sysTicker, ok := s.(SystemTicker)
        if !ok{
            continue
        }

        w.systems = append(w.systems, sysTicker)
    }

    return nil
}

func (w *World) Tick(ctx context.Context) error{
    for _, s := range w.systems{
        if err := s.Tick(ctx, w); err != nil{
            return err
        }
    }
    return nil
}

type ReliedOnIter func(reliedOn System) bool

type System interface{
    Initialize(w *World) error
    ReliesOn() ReliedOnIter
}

type SystemTicker interface{
    System
    Tick(ctx context.Context, w *World) error
}

{%- endfunc -%}