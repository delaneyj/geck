// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: geck/v1/geck.proto

package geckpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KnownID int32

const (
	KnownID_UNKNOWN      KnownID = 0
	KnownID_INTERNAL     KnownID = 1
	KnownID_INDENTIFIER  KnownID = 2
	KnownID_NAME         KnownID = 3
	KnownID_WILDCARD     KnownID = 4
	KnownID_CHILD_OF     KnownID = 5
	KnownID_INSTANCE_OF  KnownID = 6
	KnownID_COMPONENT    KnownID = 7
	KnownID_USER_DEFINED KnownID = 1000
)

// Enum value maps for KnownID.
var (
	KnownID_name = map[int32]string{
		0:    "UNKNOWN",
		1:    "INTERNAL",
		2:    "INDENTIFIER",
		3:    "NAME",
		4:    "WILDCARD",
		5:    "CHILD_OF",
		6:    "INSTANCE_OF",
		7:    "COMPONENT",
		1000: "USER_DEFINED",
	}
	KnownID_value = map[string]int32{
		"UNKNOWN":      0,
		"INTERNAL":     1,
		"INDENTIFIER":  2,
		"NAME":         3,
		"WILDCARD":     4,
		"CHILD_OF":     5,
		"INSTANCE_OF":  6,
		"COMPONENT":    7,
		"USER_DEFINED": 1000,
	}
)

func (x KnownID) Enum() *KnownID {
	p := new(KnownID)
	*p = x
	return p
}

func (x KnownID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnownID) Descriptor() protoreflect.EnumDescriptor {
	return file_geck_v1_geck_proto_enumTypes[0].Descriptor()
}

func (KnownID) Type() protoreflect.EnumType {
	return &file_geck_v1_geck_proto_enumTypes[0]
}

func (x KnownID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KnownID.Descriptor instead.
func (KnownID) EnumDescriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{0}
}

type ComponentColumnDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentId    uint64 `protobuf:"varint,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	ArchetypeIndex uint32 `protobuf:"varint,2,opt,name=archetype_index,json=archetypeIndex,proto3" json:"archetype_index,omitempty"`
	Count          uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Data           []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ComponentColumnDefinition) Reset() {
	*x = ComponentColumnDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geck_v1_geck_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentColumnDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentColumnDefinition) ProtoMessage() {}

func (x *ComponentColumnDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_geck_v1_geck_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentColumnDefinition.ProtoReflect.Descriptor instead.
func (*ComponentColumnDefinition) Descriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{0}
}

func (x *ComponentColumnDefinition) GetComponentId() uint64 {
	if x != nil {
		return x.ComponentId
	}
	return 0
}

func (x *ComponentColumnDefinition) GetArchetypeIndex() uint32 {
	if x != nil {
		return x.ArchetypeIndex
	}
	return 0
}

func (x *ComponentColumnDefinition) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ComponentColumnDefinition) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ArchetypeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         uint64                               `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Depth        uint32                               `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	ComponentIds []uint64                             `protobuf:"varint,3,rep,packed,name=component_ids,json=componentIds,proto3" json:"component_ids,omitempty"`
	DataColumns  []*ComponentColumnDefinition         `protobuf:"bytes,4,rep,name=data_columns,json=dataColumns,proto3" json:"data_columns,omitempty"`
	Edges        map[uint64]*ArchetypeDefinition_Edge `protobuf:"bytes,5,rep,name=edges,proto3" json:"edges,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Entities     []uint64                             `protobuf:"varint,6,rep,packed,name=entities,proto3" json:"entities,omitempty"`
}

func (x *ArchetypeDefinition) Reset() {
	*x = ArchetypeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geck_v1_geck_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchetypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchetypeDefinition) ProtoMessage() {}

func (x *ArchetypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_geck_v1_geck_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchetypeDefinition.ProtoReflect.Descriptor instead.
func (*ArchetypeDefinition) Descriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{1}
}

func (x *ArchetypeDefinition) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *ArchetypeDefinition) GetDepth() uint32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *ArchetypeDefinition) GetComponentIds() []uint64 {
	if x != nil {
		return x.ComponentIds
	}
	return nil
}

func (x *ArchetypeDefinition) GetDataColumns() []*ComponentColumnDefinition {
	if x != nil {
		return x.DataColumns
	}
	return nil
}

func (x *ArchetypeDefinition) GetEdges() map[uint64]*ArchetypeDefinition_Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *ArchetypeDefinition) GetEntities() []uint64 {
	if x != nil {
		return x.Entities
	}
	return nil
}

type IDRecordDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Archetype *ArchetypeDefinition `protobuf:"bytes,1,opt,name=archetype,proto3" json:"archetype,omitempty"`
	Row       uint32               `protobuf:"varint,2,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *IDRecordDefinition) Reset() {
	*x = IDRecordDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geck_v1_geck_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDRecordDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDRecordDefinition) ProtoMessage() {}

func (x *IDRecordDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_geck_v1_geck_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDRecordDefinition.ProtoReflect.Descriptor instead.
func (*IDRecordDefinition) Descriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{2}
}

func (x *IDRecordDefinition) GetArchetype() *ArchetypeDefinition {
	if x != nil {
		return x.Archetype
	}
	return nil
}

func (x *IDRecordDefinition) GetRow() uint32 {
	if x != nil {
		return x.Row
	}
	return 0
}

type ArchetypeToRowMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[uint64]uint32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ArchetypeToRowMap) Reset() {
	*x = ArchetypeToRowMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geck_v1_geck_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchetypeToRowMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchetypeToRowMap) ProtoMessage() {}

func (x *ArchetypeToRowMap) ProtoReflect() protoreflect.Message {
	mi := &file_geck_v1_geck_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchetypeToRowMap.ProtoReflect.Descriptor instead.
func (*ArchetypeToRowMap) Descriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{3}
}

func (x *ArchetypeToRowMap) GetValue() map[uint64]uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type ComponentToArchetype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[uint64]*ArchetypeToRowMap `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ComponentToArchetype) Reset() {
	*x = ComponentToArchetype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geck_v1_geck_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentToArchetype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentToArchetype) ProtoMessage() {}

func (x *ComponentToArchetype) ProtoReflect() protoreflect.Message {
	mi := &file_geck_v1_geck_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentToArchetype.ProtoReflect.Descriptor instead.
func (*ComponentToArchetype) Descriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{4}
}

func (x *ComponentToArchetype) GetValue() map[uint64]*ArchetypeToRowMap {
	if x != nil {
		return x.Value
	}
	return nil
}

type ComponentMetadataDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ResetExample []byte `protobuf:"bytes,3,opt,name=resetExample,proto3" json:"resetExample,omitempty"`
	ElementSize  uint32 `protobuf:"varint,4,opt,name=element_size,json=elementSize,proto3" json:"element_size,omitempty"`
}

func (x *ComponentMetadataDefinition) Reset() {
	*x = ComponentMetadataDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geck_v1_geck_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentMetadataDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentMetadataDefinition) ProtoMessage() {}

func (x *ComponentMetadataDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_geck_v1_geck_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentMetadataDefinition.ProtoReflect.Descriptor instead.
func (*ComponentMetadataDefinition) Descriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{5}
}

func (x *ComponentMetadataDefinition) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComponentMetadataDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentMetadataDefinition) GetResetExample() []byte {
	if x != nil {
		return x.ResetExample
	}
	return nil
}

func (x *ComponentMetadataDefinition) GetElementSize() uint32 {
	if x != nil {
		return x.ElementSize
	}
	return 0
}

type WorldDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableId                       []uint64                                `protobuf:"varint,1,rep,packed,name=available_id,json=availableId,proto3" json:"available_id,omitempty"`
	NextId                            uint64                                  `protobuf:"varint,2,opt,name=next_id,json=nextId,proto3" json:"next_id,omitempty"`
	ComponentMetadata                 map[uint64]*ComponentMetadataDefinition `protobuf:"bytes,3,rep,name=component_metadata,json=componentMetadata,proto3" json:"component_metadata,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Archetypes                        map[uint64]*ArchetypeDefinition         `protobuf:"bytes,4,rep,name=archetypes,proto3" json:"archetypes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ArchetypeComponentComlumnIndicies *ComponentToArchetype                   `protobuf:"bytes,5,opt,name=archetype_component_comlumn_indicies,json=archetypeComponentComlumnIndicies,proto3" json:"archetype_component_comlumn_indicies,omitempty"`
}

func (x *WorldDefinition) Reset() {
	*x = WorldDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geck_v1_geck_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldDefinition) ProtoMessage() {}

func (x *WorldDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_geck_v1_geck_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldDefinition.ProtoReflect.Descriptor instead.
func (*WorldDefinition) Descriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{6}
}

func (x *WorldDefinition) GetAvailableId() []uint64 {
	if x != nil {
		return x.AvailableId
	}
	return nil
}

func (x *WorldDefinition) GetNextId() uint64 {
	if x != nil {
		return x.NextId
	}
	return 0
}

func (x *WorldDefinition) GetComponentMetadata() map[uint64]*ComponentMetadataDefinition {
	if x != nil {
		return x.ComponentMetadata
	}
	return nil
}

func (x *WorldDefinition) GetArchetypes() map[uint64]*ArchetypeDefinition {
	if x != nil {
		return x.Archetypes
	}
	return nil
}

func (x *WorldDefinition) GetArchetypeComponentComlumnIndicies() *ComponentToArchetype {
	if x != nil {
		return x.ArchetypeComponentComlumnIndicies
	}
	return nil
}

type ArchetypeDefinition_Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddId    uint64 `protobuf:"varint,1,opt,name=add_id,json=addId,proto3" json:"add_id,omitempty"`
	RemoveId uint64 `protobuf:"varint,2,opt,name=remove_id,json=removeId,proto3" json:"remove_id,omitempty"`
}

func (x *ArchetypeDefinition_Edge) Reset() {
	*x = ArchetypeDefinition_Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_geck_v1_geck_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchetypeDefinition_Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchetypeDefinition_Edge) ProtoMessage() {}

func (x *ArchetypeDefinition_Edge) ProtoReflect() protoreflect.Message {
	mi := &file_geck_v1_geck_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchetypeDefinition_Edge.ProtoReflect.Descriptor instead.
func (*ArchetypeDefinition_Edge) Descriptor() ([]byte, []int) {
	return file_geck_v1_geck_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ArchetypeDefinition_Edge) GetAddId() uint64 {
	if x != nil {
		return x.AddId
	}
	return 0
}

func (x *ArchetypeDefinition_Edge) GetRemoveId() uint64 {
	if x != nil {
		return x.RemoveId
	}
	return 0
}

var File_geck_v1_geck_proto protoreflect.FileDescriptor

var file_geck_v1_geck_proto_rawDesc = []byte{
	0x0a, 0x12, 0x67, 0x65, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x63, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x03, 0x0a, 0x13, 0x41, 0x72, 0x63, 0x68, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4a, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x04, 0x45, 0x64, 0x67,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x61, 0x64, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x64, 0x1a, 0x60, 0x0a, 0x0a, 0x45, 0x64, 0x67, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x12, 0x49, 0x44, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x09, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x22, 0x8f, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f,
	0x52, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f,
	0x52, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x61, 0x74,
	0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x59, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x1b,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6e, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0a, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x24, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x52, 0x21, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a,
	0x6f, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x61, 0x74,
	0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x60, 0x0a, 0x0f, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x65, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0x8e, 0x01, 0x0a, 0x07, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x44, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x4c, 0x44, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x4f, 0x46, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x46, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0xe8, 0x07, 0x42, 0x9e, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x74, 0x73,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x47, 0x65, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x64, 0x65, 0x6c, 0x61, 0x6e, 0x65, 0x79, 0x6a, 0x2f, 0x67, 0x65, 0x63, 0x6b, 0x2f,
	0x70, 0x62, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x65, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x67,
	0x65, 0x63, 0x6b, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x4e, 0x61,
	0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x4e, 0x61, 0x74,
	0x73, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x4e, 0x61, 0x74, 0x73,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x4e, 0x61, 0x74, 0x73, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_geck_v1_geck_proto_rawDescOnce sync.Once
	file_geck_v1_geck_proto_rawDescData = file_geck_v1_geck_proto_rawDesc
)

func file_geck_v1_geck_proto_rawDescGZIP() []byte {
	file_geck_v1_geck_proto_rawDescOnce.Do(func() {
		file_geck_v1_geck_proto_rawDescData = protoimpl.X.CompressGZIP(file_geck_v1_geck_proto_rawDescData)
	})
	return file_geck_v1_geck_proto_rawDescData
}

var file_geck_v1_geck_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_geck_v1_geck_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_geck_v1_geck_proto_goTypes = []interface{}{
	(KnownID)(0),                        // 0: natsproxy.v1.KnownID
	(*ComponentColumnDefinition)(nil),   // 1: natsproxy.v1.ComponentColumnDefinition
	(*ArchetypeDefinition)(nil),         // 2: natsproxy.v1.ArchetypeDefinition
	(*IDRecordDefinition)(nil),          // 3: natsproxy.v1.IDRecordDefinition
	(*ArchetypeToRowMap)(nil),           // 4: natsproxy.v1.ArchetypeToRowMap
	(*ComponentToArchetype)(nil),        // 5: natsproxy.v1.ComponentToArchetype
	(*ComponentMetadataDefinition)(nil), // 6: natsproxy.v1.ComponentMetadataDefinition
	(*WorldDefinition)(nil),             // 7: natsproxy.v1.WorldDefinition
	(*ArchetypeDefinition_Edge)(nil),    // 8: natsproxy.v1.ArchetypeDefinition.Edge
	nil,                                 // 9: natsproxy.v1.ArchetypeDefinition.EdgesEntry
	nil,                                 // 10: natsproxy.v1.ArchetypeToRowMap.ValueEntry
	nil,                                 // 11: natsproxy.v1.ComponentToArchetype.ValueEntry
	nil,                                 // 12: natsproxy.v1.WorldDefinition.ComponentMetadataEntry
	nil,                                 // 13: natsproxy.v1.WorldDefinition.ArchetypesEntry
}
var file_geck_v1_geck_proto_depIdxs = []int32{
	1,  // 0: natsproxy.v1.ArchetypeDefinition.data_columns:type_name -> natsproxy.v1.ComponentColumnDefinition
	9,  // 1: natsproxy.v1.ArchetypeDefinition.edges:type_name -> natsproxy.v1.ArchetypeDefinition.EdgesEntry
	2,  // 2: natsproxy.v1.IDRecordDefinition.archetype:type_name -> natsproxy.v1.ArchetypeDefinition
	10, // 3: natsproxy.v1.ArchetypeToRowMap.value:type_name -> natsproxy.v1.ArchetypeToRowMap.ValueEntry
	11, // 4: natsproxy.v1.ComponentToArchetype.value:type_name -> natsproxy.v1.ComponentToArchetype.ValueEntry
	12, // 5: natsproxy.v1.WorldDefinition.component_metadata:type_name -> natsproxy.v1.WorldDefinition.ComponentMetadataEntry
	13, // 6: natsproxy.v1.WorldDefinition.archetypes:type_name -> natsproxy.v1.WorldDefinition.ArchetypesEntry
	5,  // 7: natsproxy.v1.WorldDefinition.archetype_component_comlumn_indicies:type_name -> natsproxy.v1.ComponentToArchetype
	8,  // 8: natsproxy.v1.ArchetypeDefinition.EdgesEntry.value:type_name -> natsproxy.v1.ArchetypeDefinition.Edge
	4,  // 9: natsproxy.v1.ComponentToArchetype.ValueEntry.value:type_name -> natsproxy.v1.ArchetypeToRowMap
	6,  // 10: natsproxy.v1.WorldDefinition.ComponentMetadataEntry.value:type_name -> natsproxy.v1.ComponentMetadataDefinition
	2,  // 11: natsproxy.v1.WorldDefinition.ArchetypesEntry.value:type_name -> natsproxy.v1.ArchetypeDefinition
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_geck_v1_geck_proto_init() }
func file_geck_v1_geck_proto_init() {
	if File_geck_v1_geck_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_geck_v1_geck_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentColumnDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geck_v1_geck_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchetypeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geck_v1_geck_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDRecordDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geck_v1_geck_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchetypeToRowMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geck_v1_geck_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentToArchetype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geck_v1_geck_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentMetadataDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geck_v1_geck_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_geck_v1_geck_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchetypeDefinition_Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_geck_v1_geck_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_geck_v1_geck_proto_goTypes,
		DependencyIndexes: file_geck_v1_geck_proto_depIdxs,
		EnumInfos:         file_geck_v1_geck_proto_enumTypes,
		MessageInfos:      file_geck_v1_geck_proto_msgTypes,
	}.Build()
	File_geck_v1_geck_proto = out.File
	file_geck_v1_geck_proto_rawDesc = nil
	file_geck_v1_geck_proto_goTypes = nil
	file_geck_v1_geck_proto_depIdxs = nil
}
